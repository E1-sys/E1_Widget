#!/usr/bin/env python
# coding: utf-8

# In[1]:


import streamlit as st
import copy
import os
import json

# 원본 사이트 데이터
sites_original = {
    "안전시공팀": {
        "description": "안전시공팀",
        "links": [
            {"description": "KSG code", "url": "https://cyber.kgs.or.kr/kgscode.Index.do", "favorite": False},
            {"description": "국가법령정보센터", "url": "https://www.law.go.kr/LSW/main.html", "favorite": False}
        ]
    },
    "기술운영": {
        "description": "기술운영",
        "links": [
            {"description": "항만물류정보시스템(PORT-MIS)", "url": "https://new.portmis.go.kr/portmis/websquare/websquare.jsp?w2xPath=/portmis/w2/main/intro.xml", "favorite": False}
        ]
    },
    "기술지원": {
        "description": "기술지원",
        "links": []
    },
    "SHE 지원팀": {
        "description": "SHE지원팀",
        "links": [
            {"description": "가스안전공사", "url": "https://www.kgs.or.kr/", "favorite": False},
            {"description": "안전보건공단", "url": "https://www.kosha.or.kr/kosha/index.do", "favorite": False}
        ]
    }
}

SAVE_DIR = "sites_data"
os.makedirs(SAVE_DIR, exist_ok=True)

def save_sites(user_id):
    if user_id == "default_user":
        return
    file_path = os.path.join(SAVE_DIR, f"{user_id}_sites.json")
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(st.session_state[f"sites_{user_id}"], f, ensure_ascii=False, indent=2)

def load_sites(user_id):
    if user_id == "default_user":
        return copy.deepcopy(sites_original)

    file_path = os.path.join(SAVE_DIR, f"{user_id}_sites.json")
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            data = json.load(f)
            for tab in data:
                for link in data[tab]["links"]:
                    if "favorite" not in link:
                        link["favorite"] = False
            return data
    else:
        return copy.deepcopy(sites_original)

LINKS_PER_PAGE = 8

user_id = st.text_input("사용자 ID를 입력하세요", value="default_user")

if user_id == "default_user" or f"sites_{user_id}" not in st.session_state:
    st.session_state[f"sites_{user_id}"] = load_sites(user_id)
    st.session_state[f"pages_{user_id}"] = {tab: 0 for tab in st.session_state[f"sites_{user_id}"]}

current_sites = st.session_state[f"sites_{user_id}"]
current_pages = st.session_state[f"pages_{user_id}"]

def delete_link(tab_name, index):
    del current_sites[tab_name]["links"][index]
    save_sites(user_id)

def add_link(tab_name, title, url):
    current_sites[tab_name]["links"].append({"description": title, "url": url, "favorite": False})
    save_sites(user_id)

def toggle_favorite(tab_name, index):
    current_sites[tab_name]["links"][index]["favorite"] = not current_sites[tab_name]["links"][index].get("favorite", False)
    save_sites(user_id)

def add_tab(tab_name):
    if tab_name and tab_name not in current_sites:
        current_sites[tab_name] = {"description": tab_name, "links": []}
        current_pages[tab_name] = 0
        save_sites(user_id)

def display_links(tab_name):
    links = current_sites[tab_name]["links"]
    page = current_pages[tab_name]

    show_only_fav = st.checkbox("즐겨찾기만 보기", key=f"fav_filter_{user_id}_{tab_name}")
    if show_only_fav:
        filtered_links = [link for link in links if link.get("favorite", False)]
    else:
        filtered_links = links

    total_pages = (len(filtered_links) + LINKS_PER_PAGE - 1) // LINKS_PER_PAGE
    start = page * LINKS_PER_PAGE
    end = start + LINKS_PER_PAGE
    paged_links = filtered_links[start:end]

    for i, link in enumerate(paged_links):
        if show_only_fav:
            idx = links.index(link)
        else:
            idx = start + i

        col0, col1, col2 = st.columns([1, 8, 1])
        fav_icon = "★" if link.get("favorite", False) else "☆"
        if col0.button(fav_icon, key=f"fav_{user_id}_{tab_name}_{idx}"):
            toggle_favorite(tab_name, idx)
            st.rerun()

        # 버튼 대신 마크다운 링크로 변경 (새 탭에서 열림)
        col1.markdown(f'<a href="{link["url"]}" target="_blank" style="text-decoration:none; color:inherit;">{link["description"]}</a>', unsafe_allow_html=True)

        if col2.button("X", key=f"del_{user_id}_{tab_name}_{idx}"):
            delete_link(tab_name, idx)
            st.rerun()

    col1, col2, col3 = st.columns([1, 1, 1])
    if page > 0:
        if col1.button("← 이전", key=f"prev_{user_id}_{tab_name}"):
            current_pages[tab_name] -= 1
            st.rerun()
    if end < len(filtered_links):
        if col3.button("다음 →", key=f"next_{user_id}_{tab_name}"):
            current_pages[tab_name] += 1
            st.rerun()

    with st.expander("➕ 링크 추가"):
        with st.form(f"form_{user_id}_{tab_name}"):
            title = st.text_input("제목", key=f"title_{user_id}_{tab_name}")
            url = st.text_input("URL", key=f"url_{user_id}_{tab_name}")
            submit = st.form_submit_button("추가")
            if submit and title and url:
                add_link(tab_name, title, url)
                st.rerun()

# --- 사이드바: 검색 + 탭 추가 UI ---
with st.sidebar:
    st.header("검색")
    search_query = st.text_input("검색어를 입력하세요", key=f"search_{user_id}")

    st.markdown("---")

    st.header("탭 추가")
    new_tab_name = st.text_input("새 탭 이름", key=f"new_tab_{user_id}")
    if st.button("탭 추가", key=f"add_tab_btn_{user_id}"):
        if not new_tab_name.strip():
            st.warning("탭 이름을 입력하세요.")
        elif new_tab_name in current_sites:
            st.warning("이미 존재하는 탭 이름입니다.")
        else:
            add_tab(new_tab_name.strip())
            st.success(f"'{new_tab_name.strip()}' 탭이 추가되었습니다.")
            st.experimental_rerun()

st.markdown(
    """
    <h1 style='color: orange;'>E1 Link</h1>
    """,
    unsafe_allow_html=True,
)

if search_query and search_query.strip():
    search_lower = search_query.lower()
    results = []
    for tab_name, tab_data in current_sites.items():
        for link in tab_data["links"]:
            if search_lower in link["description"].lower():
                results.append((tab_name, link))

    st.subheader(f"검색 결과 ({len(results)}개) — '{search_query}'")
    if results:
        for tab_name, link in results:
            # 검색 결과도 마크다운 링크로 새 탭에서 열리게
            if st.button(f"[{tab_name}] {link['description']}", key=f"search_{user_id}_{tab_name}_{link['description']}"):
                # 그냥 st.write 링크를 눌러 열기 어려우니 버튼 대신 마크다운 링크를 따로 출력
                st.markdown(f'<a href="{link["url"]}" target="_blank">{link["description"]}</a>', unsafe_allow_html=True)
    else:
        st.write("검색 결과가 없습니다.")
else:
    tab_titles = list(current_sites.keys())
    tabs = st.tabs(tab_titles)

    for i, tab in enumerate(tabs):
        tab_name = tab_titles[i]
        with tab:
            st.header(tab_name)
            display_links(tab_name)

st.markdown("---")
portals = [
    ("BI Portal", "https://bi.e1.co.kr/#/signin?isDefaultIdentityPoolLogin=true&redirect=%2Fsite%2FE1%2Fviews%2FBI-IX_S1_5__new%2FECOverallDashboard%3F%253Aiid%3D1"),
    ("SHE Portal", "https://she.e1.co.kr/index"),
    ("Ariba", "https://ariba.portal.url"),
    ("E1 홈페이지", "https://www.e1.co.kr/ko/main")
]

cols = st.columns(len(portals))
for col, (name, url) in zip(cols, portals):
    col.markdown(f"[{name}]({url})")
