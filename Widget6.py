{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d7f00e42-6751-4959-8cd5-3e3375e6308e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-06-09 16:12:44.051 WARNING streamlit.runtime.state.session_state_proxy: Session state does not function when running a script without `streamlit run`\n",
      "2025-06-09 16:12:44.554 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\c42064\\AppData\\Local\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import copy\n",
    "import os\n",
    "import json\n",
    "\n",
    "# 원본 사이트 데이터\n",
    "sites_original = {\n",
    "    \"안전시공팀\": {\n",
    "        \"description\": \"안전시공팀\",\n",
    "        \"links\": [\n",
    "            {\"description\": \"KSG code\", \"url\": \"https://cyber.kgs.or.kr/kgscode.Index.do\", \"favorite\": False},\n",
    "            {\"description\": \"국가법령정보센터\", \"url\": \"https://www.law.go.kr/LSW/main.html\", \"favorite\": False}\n",
    "        ]\n",
    "    },\n",
    "    \"기술운영\": {\n",
    "        \"description\": \"기술운영\",\n",
    "        \"links\": [\n",
    "            {\"description\": \"항만물류정보시스템(PORT-MIS)\", \"url\": \"https://new.portmis.go.kr/portmis/websquare/websquare.jsp?w2xPath=/portmis/w2/main/intro.xml\", \"favorite\": False}\n",
    "        ]\n",
    "    },\n",
    "    \"기술지원\": {\n",
    "        \"description\": \"기술지원\",\n",
    "        \"links\": []\n",
    "    },\n",
    "    \"SHE 지원팀\": {\n",
    "        \"description\": \"SHE지원팀\",\n",
    "        \"links\": [\n",
    "            {\"description\": \"가스안전공사\", \"url\": \"https://www.kgs.or.kr/\", \"favorite\": False},\n",
    "            {\"description\": \"안전보건공단\", \"url\": \"https://www.kosha.or.kr/kosha/index.do\", \"favorite\": False}\n",
    "        ]\n",
    "    }\n",
    "}\n",
    "\n",
    "SAVE_DIR = \"sites_data\"\n",
    "os.makedirs(SAVE_DIR, exist_ok=True)\n",
    "\n",
    "def save_sites(user_id):\n",
    "    if user_id == \"default_user\":\n",
    "        return\n",
    "    file_path = os.path.join(SAVE_DIR, f\"{user_id}_sites.json\")\n",
    "    with open(file_path, \"w\", encoding=\"utf-8\") as f:\n",
    "        json.dump(st.session_state[f\"sites_{user_id}\"], f, ensure_ascii=False, indent=2)\n",
    "\n",
    "def load_sites(user_id):\n",
    "    if user_id == \"default_user\":\n",
    "        return copy.deepcopy(sites_original)\n",
    "\n",
    "    file_path = os.path.join(SAVE_DIR, f\"{user_id}_sites.json\")\n",
    "    if os.path.exists(file_path):\n",
    "        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n",
    "            data = json.load(f)\n",
    "            for tab in data:\n",
    "                for link in data[tab][\"links\"]:\n",
    "                    if \"favorite\" not in link:\n",
    "                        link[\"favorite\"] = False\n",
    "            return data\n",
    "    else:\n",
    "        return copy.deepcopy(sites_original)\n",
    "\n",
    "LINKS_PER_PAGE = 8\n",
    "\n",
    "user_id = st.text_input(\"사용자 ID를 입력하세요\", value=\"default_user\")\n",
    "\n",
    "if user_id == \"default_user\" or f\"sites_{user_id}\" not in st.session_state:\n",
    "    st.session_state[f\"sites_{user_id}\"] = load_sites(user_id)\n",
    "    st.session_state[f\"pages_{user_id}\"] = {tab: 0 for tab in st.session_state[f\"sites_{user_id}\"]}\n",
    "\n",
    "current_sites = st.session_state[f\"sites_{user_id}\"]\n",
    "current_pages = st.session_state[f\"pages_{user_id}\"]\n",
    "\n",
    "def delete_link(tab_name, index):\n",
    "    del current_sites[tab_name][\"links\"][index]\n",
    "    save_sites(user_id)\n",
    "\n",
    "def add_link(tab_name, title, url):\n",
    "    current_sites[tab_name][\"links\"].append({\"description\": title, \"url\": url, \"favorite\": False})\n",
    "    save_sites(user_id)\n",
    "\n",
    "def toggle_favorite(tab_name, index):\n",
    "    current_sites[tab_name][\"links\"][index][\"favorite\"] = not current_sites[tab_name][\"links\"][index].get(\"favorite\", False)\n",
    "    save_sites(user_id)\n",
    "\n",
    "def add_tab(tab_name):\n",
    "    if tab_name and tab_name not in current_sites:\n",
    "        current_sites[tab_name] = {\"description\": tab_name, \"links\": []}\n",
    "        current_pages[tab_name] = 0\n",
    "        save_sites(user_id)\n",
    "\n",
    "def display_links(tab_name):\n",
    "    links = current_sites[tab_name][\"links\"]\n",
    "    page = current_pages[tab_name]\n",
    "\n",
    "    show_only_fav = st.checkbox(\"즐겨찾기만 보기\", key=f\"fav_filter_{user_id}_{tab_name}\")\n",
    "    if show_only_fav:\n",
    "        filtered_links = [link for link in links if link.get(\"favorite\", False)]\n",
    "    else:\n",
    "        filtered_links = links\n",
    "\n",
    "    total_pages = (len(filtered_links) + LINKS_PER_PAGE - 1) // LINKS_PER_PAGE\n",
    "    start = page * LINKS_PER_PAGE\n",
    "    end = start + LINKS_PER_PAGE\n",
    "    paged_links = filtered_links[start:end]\n",
    "\n",
    "    for i, link in enumerate(paged_links):\n",
    "        if show_only_fav:\n",
    "            idx = links.index(link)\n",
    "        else:\n",
    "            idx = start + i\n",
    "\n",
    "        col0, col1, col2 = st.columns([1, 8, 1])\n",
    "        fav_icon = \"★\" if link.get(\"favorite\", False) else \"☆\"\n",
    "        if col0.button(fav_icon, key=f\"fav_{user_id}_{tab_name}_{idx}\"):\n",
    "            toggle_favorite(tab_name, idx)\n",
    "            st.rerun()\n",
    "\n",
    "        # 버튼 대신 마크다운 링크로 변경 (새 탭에서 열림)\n",
    "        col1.markdown(f'<a href=\"{link[\"url\"]}\" target=\"_blank\" style=\"text-decoration:none; color:inherit;\">{link[\"description\"]}</a>', unsafe_allow_html=True)\n",
    "\n",
    "        if col2.button(\"X\", key=f\"del_{user_id}_{tab_name}_{idx}\"):\n",
    "            delete_link(tab_name, idx)\n",
    "            st.rerun()\n",
    "\n",
    "    col1, col2, col3 = st.columns([1, 1, 1])\n",
    "    if page > 0:\n",
    "        if col1.button(\"← 이전\", key=f\"prev_{user_id}_{tab_name}\"):\n",
    "            current_pages[tab_name] -= 1\n",
    "            st.rerun()\n",
    "    if end < len(filtered_links):\n",
    "        if col3.button(\"다음 →\", key=f\"next_{user_id}_{tab_name}\"):\n",
    "            current_pages[tab_name] += 1\n",
    "            st.rerun()\n",
    "\n",
    "    with st.expander(\"➕ 링크 추가\"):\n",
    "        with st.form(f\"form_{user_id}_{tab_name}\"):\n",
    "            title = st.text_input(\"제목\", key=f\"title_{user_id}_{tab_name}\")\n",
    "            url = st.text_input(\"URL\", key=f\"url_{user_id}_{tab_name}\")\n",
    "            submit = st.form_submit_button(\"추가\")\n",
    "            if submit and title and url:\n",
    "                add_link(tab_name, title, url)\n",
    "                st.rerun()\n",
    "\n",
    "# --- 사이드바: 검색 + 탭 추가 UI ---\n",
    "with st.sidebar:\n",
    "    st.header(\"검색\")\n",
    "    search_query = st.text_input(\"검색어를 입력하세요\", key=f\"search_{user_id}\")\n",
    "\n",
    "    st.markdown(\"---\")\n",
    "\n",
    "    st.header(\"탭 추가\")\n",
    "    new_tab_name = st.text_input(\"새 탭 이름\", key=f\"new_tab_{user_id}\")\n",
    "    if st.button(\"탭 추가\", key=f\"add_tab_btn_{user_id}\"):\n",
    "        if not new_tab_name.strip():\n",
    "            st.warning(\"탭 이름을 입력하세요.\")\n",
    "        elif new_tab_name in current_sites:\n",
    "            st.warning(\"이미 존재하는 탭 이름입니다.\")\n",
    "        else:\n",
    "            add_tab(new_tab_name.strip())\n",
    "            st.success(f\"'{new_tab_name.strip()}' 탭이 추가되었습니다.\")\n",
    "            st.experimental_rerun()\n",
    "\n",
    "st.markdown(\n",
    "    \"\"\"\n",
    "    <h1 style='color: orange;'>E1 Link</h1>\n",
    "    \"\"\",\n",
    "    unsafe_allow_html=True,\n",
    ")\n",
    "\n",
    "if search_query and search_query.strip():\n",
    "    search_lower = search_query.lower()\n",
    "    results = []\n",
    "    for tab_name, tab_data in current_sites.items():\n",
    "        for link in tab_data[\"links\"]:\n",
    "            if search_lower in link[\"description\"].lower():\n",
    "                results.append((tab_name, link))\n",
    "\n",
    "    st.subheader(f\"검색 결과 ({len(results)}개) — '{search_query}'\")\n",
    "    if results:\n",
    "        for tab_name, link in results:\n",
    "            # 검색 결과도 마크다운 링크로 새 탭에서 열리게\n",
    "            if st.button(f\"[{tab_name}] {link['description']}\", key=f\"search_{user_id}_{tab_name}_{link['description']}\"):\n",
    "                # 그냥 st.write 링크를 눌러 열기 어려우니 버튼 대신 마크다운 링크를 따로 출력\n",
    "                st.markdown(f'<a href=\"{link[\"url\"]}\" target=\"_blank\">{link[\"description\"]}</a>', unsafe_allow_html=True)\n",
    "    else:\n",
    "        st.write(\"검색 결과가 없습니다.\")\n",
    "else:\n",
    "    tab_titles = list(current_sites.keys())\n",
    "    tabs = st.tabs(tab_titles)\n",
    "\n",
    "    for i, tab in enumerate(tabs):\n",
    "        tab_name = tab_titles[i]\n",
    "        with tab:\n",
    "            st.header(tab_name)\n",
    "            display_links(tab_name)\n",
    "\n",
    "st.markdown(\"---\")\n",
    "portals = [\n",
    "    (\"BI Portal\", \"https://bi.e1.co.kr/#/signin?isDefaultIdentityPoolLogin=true&redirect=%2Fsite%2FE1%2Fviews%2FBI-IX_S1_5__new%2FECOverallDashboard%3F%253Aiid%3D1\"),\n",
    "    (\"SHE Portal\", \"https://she.e1.co.kr/index\"),\n",
    "    (\"Ariba\", \"https://ariba.portal.url\"),\n",
    "    (\"E1 홈페이지\", \"https://www.e1.co.kr/ko/main\")\n",
    "]\n",
    "\n",
    "cols = st.columns(len(portals))\n",
    "for col, (name, url) in zip(cols, portals):\n",
    "    col.markdown(f\"[{name}]({url})\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
